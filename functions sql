--FUNCTIONS


CREATE FUNCTION DOBFUNCTION1(@DOB DATETIME)
RETURNS VARCHAR(50)
AS
BEGIN
DECLARE @YEAR INT, @TEMPDOB DATETIME, @M INT,@D INT
SET @TEMPDOB = @DOB
SELECT @YEAR= DATEDIFF(YEAR,@DOB,GETDATE())-CASE WHEN MONTH(@DOB)>MONTH(GETDATE()) OR (MONTH(@DOB)=MONTH(GETDATE()) AND DAY(@DOB)=DAY(GETDATE()))	THEN 1 ELSE 0 END
SELECT @DOB=DATEADD(YEAR,@YEAR,@DOB)
--SELECT @YEAR
SELECT @M = DATEDIFF(MONTH,@DOB,GETDATE())- CASE WHEN DAY(@DOB)>DAY(GETDATE()) THEN 1 ELSE 0 END
SELECT @DOB = DATEADD(MONTH,@M,@DOB)
--SELECT @M
--SELECT @DOB
SELECT @D=DATEDIFF(DAY,@DOB,GETDATE())
--SELECT @D
--SELECT @DOB
DECLARE @AGE NVARCHAR(50)
SET @AGE=CAST(@YEAR AS NVARCHAR(20)) + ' YEARS ' + CONVERT(VARCHAR(10),@M) +' MONTHS '+ CAST(@D AS nvarchar(10)) +' DAYS OLD'  
RETURN @YEAR
END

SELECT dbo.DOBFUNCTION('2000-11-19')

create table tblstud(id int, name varchar(10),dob date)
insert into tblstud values(2,'imu','12/19/2001'),
						  (3,'imu','10/19/2002'),
						  (4,'imu','9/19/2003'),
						  (5,'imu','8/19/2004'),
						  (6,'imu','11/19/1999')
select * from tblstud

select *,dbo.DOBFUNCTION1(dob) from tblstud 

select *,dbo.DOBFUNCTION1(dob) AS AGE from tblstud  WHERE dbo.DOBFUNCTION1(dob)>=20

CREATE PROCEDURE DOBPROCEDURE
@DOB DATETIME
AS
BEGIN
DECLARE @YEAR INT, @TEMPDOB DATETIME, @M INT,@D INT
SET @TEMPDOB = @DOB
SELECT @YEAR= DATEDIFF(YEAR,@DOB,GETDATE())-CASE WHEN MONTH(@DOB)>MONTH(GETDATE()) OR (MONTH(@DOB)=MONTH(GETDATE()) AND DAY(@DOB)=DAY(GETDATE()))	THEN 1 ELSE 0 END
SELECT @DOB=DATEADD(YEAR,@YEAR,@DOB)
--SELECT @YEAR
SELECT @M = DATEDIFF(MONTH,@DOB,GETDATE())- CASE WHEN DAY(@DOB)>DAY(GETDATE()) THEN 1 ELSE 0 END
SELECT @DOB = DATEADD(MONTH,@M,@DOB)
--SELECT @M
--SELECT @DOB
SELECT @D=DATEDIFF(DAY,@DOB,GETDATE())
--SELECT @D
--SELECT @DOB
DECLARE @AGE NVARCHAR(50)
SET @AGE=CAST(@YEAR AS NVARCHAR(20)) + ' YEARS ' + CONVERT(VARCHAR(10),@M) +' MONTHS '+ CAST(@D AS nvarchar(10)) +' DAYS OLD'  
SELECT @AGE
EN

SELECT *,dbo.DOBPROCEDURE(dob) FROM tblstud

alter table tblstud add gender varchar(10)

select * from tblstud

update tblstud set gender = 'male' where id in (1,3,5)

--inline functoion --> are stored under sqldb-->programmability-->functions-->table-valued functions

create function inlinegenderfunction(@gender varchar(10))
returns table
as
return (select * from tblstud where gender=@gender)
--> to execute inline function below is the example
select * from dbo.inlinegenderfunction('female') where id>2


select * from tblstud

create function inlinefun()
returns table
as
return (select * from tblstud)

select * from dbo.inlinefun()
update dbo.inlinefun() set name='imran' where id=2

create function multilinefun()
returns @table table(id int, name varchar(10),dob date)
as 
begin
	insert into @table
	select id,name,dob from tblstud
	return 
end

select * from dbo.multilinefun() 

update dbo.multilinefun() set name='imran' where id=2 --Msg 270, Level 16, State 1, Line 439
													  --Object 'dbo.multilinefun' cannot be modified.

difference 
--inline the return cant contain the structure
--no begin end 
--inline performance is better thn multi
--cant update in multi
